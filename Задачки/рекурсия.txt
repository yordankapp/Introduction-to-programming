#include <iostream>
using namespace std;
const int  MAX= 100;

long sum(long *a, long n)
{
    if(n==0)
        return 0;
    return a[0]+sum(a+1,n-1);
}

bool found(long *a, long n, long x)
{
    if(n==0)
        return 0;
    if(a[0]==x)
        return true;
    return found(a+1,n-1,x);
}

bool incr(long *a, long n)
{
    if(n<=1)
        return true;
    return (a[0]<=a[1] && incr(a+1,n-1));
}

bool diff(long *a, long n)
{
    if(n<=1)
        return true;
    return (!found(a+1,n-1,a[0]) && diff(a+1,n-1));
}

// Връща индекса на последния елемент a[i] < x
int split(long a[], int n, long x) {
    int i = 0, j = n - 1;
    while (i != j)
        if (a[i] < x)
            // i-тия елемент си е на мястото
            // Продължаваме нататък
            i++;
        else
        if (a[j] >= x)
            // j-тия елемент си е на мястото
            // продължаваме нататък
            j--;
        else
            // трябва да разменим a[i] с a[j]
            swap(a[i], a[j]);
    // Вече i == j
    // Трябва да проверим дали a[i] е в лявата или в дясната част
    if (a[i] < x)
        // a[i] е в лявата част
        return i;
    // a[i] е в дясната част
    return i - 1;
}
void Quicksort(long* a,long n)
{
    if (n <= 1)
        return;
    // 1. Избираме ос
    long x = a[0];
    // 2. Разделяме масива на две части относно оста
    // Split връща индекса на последния елемент в частта <x
    int k = split(a + 1, n - 1, x) + 1;
    // 3. Поставяме оста "между" двете части на масива
    // т.е. разменим a[0] с a[k]
    swap(a[0], a[k]);
    // Сортираме лявата част, т.е. елементите <x
    Quicksort(a, k);
    // Сортираме дясната част без оста, т.е. елементите >=x
    Quicksort(a + k + 1, n - k - 1);
}

bool equalStrings(char const* str1, char const* str2)
{
    if(*str1=='\0' && *str2=='\0')
        return true;
    if(*str1!=*str2)
        return false;
    if(*str1!='\0' && *str2!='\0' && *str1==*str2)
        return  equalStrings(str1+1, str2+1);

}

int main()
{
    long a[MAX] = { 0 };
    int n;
    cout << "n= "; cin >> n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    cout << "sum " << sum(a, n) << endl; // сума на елементите в масива
    cout << "is there 5? " << found(a, n, 5) << endl; // 5 в масива ли е
    cout << "incr? " << incr(a, n) << endl; // сортиран ли е масива във възходящ ред
    cout << "diff? " << diff(a, n) << endl; // различни ли са елементите в масива

    Quicksort(a,n);

    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    cout<<equalStrings("hello","hello")<<endl;
    cout<<equalStrings("hello","hi");
    return 0;

}